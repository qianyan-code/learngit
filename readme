工作区：
Git is a version control system.
Git is free software.
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git is a distributed version control system.
Git has a mutable index called stage.
Git tracks changes of files.
Greating a new branch is quick & simple.

笔记区：
/*git创建版本库小结：初始化一个Git仓库，使用git init命令
						添加文件到Git仓库，分两步：
												1、使用命令git add file + 属性名 ,注意可以反复多次使用，添加多个文件  
												2、使用命令git commit -m ”备注（自己的改动）“,完成
						注意：	//commit -m尖括号中要使用英文双引号，备注可以输入中文
								//在有的电脑中文件的属性是隐藏的，可以不在file后面可以不加文件的属性，但有的需要
								//我之前添加失败的原因是git的默	认路径是“/C/Users/米咪”，因为我的用户名是中文的，所以导致添加失败
*/

/*时光穿梭机小结：	要随时掌握工作区的状态，使用git status命令
					如果git status告诉你文件被修改过，可以用git diff查看修改的内容
			//	
*/

/*版本回退小结：HEAD指向的版本就是当前版本，因此，git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id
				穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本
				要重返未来，用git reflog 查看命令历史，以便确定要回到未来的哪个版本
		//	git log可以查看历史提交的commit，显示出来的结果会显得过于啰嗦，
		    可以使用 git log --pretty=oneline 将改变的的commit用一行输出
		版本回退的步骤：回到过去：如果你想回到前一个版可以使用git reset --hard HEAD^,回到前两个可以使用git reset --hard HEAD^^,依此类推，回到前一百个版本可以使用git reset HEAD~100
			回到现在：在你到了过去之后如果使用git log是查看不到现在的版本的，你可以使用git reflog来查看之前版本的commit_id，之后再使用git reset --hard commit_id来回到现在
*/ 

/*工作区和暂存区笔记：工作区就是我们在电脑里能看到的目录，比如learngit文件夹就是一个工作区：
								版本库：工作区有一个隐藏的目录.git，这个不算工作区，而是git的版本库
								在git的版本库中存了很多东西，其中最重要的就是称为stage的暂存区，还有git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD
								从这个角度可以将git add理解为把文件修改添加到暂存区
										git commit实际上就是把暂存区的所有内容都提交到当前分支
						//git diff是比较工作区和暂存区的区别	git diff --cached是比较暂存区和版本库的区别
*/

/*管理修改笔记：git比其他版本控制系统设计的更优秀，是因为git跟踪并管理的是修改，而非文件
		当这样使用时：第一次修改——>git add —>第二次修改 —>git commit 。提交的修改是第一次的，因为git commit只是负责把暂存区的修改提交，也就是第一次的修改被提交了，
		//git管理的是修改，而不是文件，如果git管理的是文件的话，那最后提交的内容应该与第二次修改的内容相同，但从这个实验可以看出两者不同
				但第二次的修改不会被提交，因为第二次的修改器并没有放入暂存区中。所以正确的用法应该是
						第一次修改——> git add ——>第二次修改——> git add ——>git commit
*/

/*撤销修改小结：
		场景一：当你改乱了工作区的某个文件的内容之后，想要直接丢弃工作区的修改时，用命令git checkout -- file（注意空格）
		场景二：当你不但改乱了工作区的某个文件的内容，还添加到了暂存区时，想要丢弃修改，分两步，第一步用git reset HEAD file，就回到了场景一，使用git checkout -- file 即可
		场景三：已经提交了不适合的修改到了版本库时，想要撤销本次提交，可以使用版本回退git reset --hard HEAD^回到上一个版本，不过前提是没有推送到远程库
*/

/*删除文件：（file都是指的文件名）
		删除文件可以在文件管理中直接删除，也可以在git中使用rm file进行删除，删除后使用git status就可以看到被你删除的文件
		要想撤销删除可以使用git checkout -- file将文件恢复（前提是版本库中有这个文件，暂存区也属于版本库）
		如果想要从版本库中删除文件，可以使用git rm file再使用commit就可以删除版本库中的文件
	作者小结：命令git rm用于删除一个文件，如果文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失
			  最近一次提交后你修改的内容
*/

/*添加远程库（github）笔记：要关联一个远程库可使用git remote add origin https://github.com/qianyan-code/c.git，最后的是你在github中创建的repository
							关联后，使用命令git push -u origin master第一次推送mater分支的所有内容，以后，每次本地提交后，只要有必要，就可以使用命令
						git push origin master推送最新的修改
							分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是在没有联网的情况下都可以正常工作，而SVN在没有联网的
						情况下是拒绝干活的，当有网络的时候再把本地提交推动一下就完成了同步
					注意：当你已经关联了一个远程库之后，如果没有实现推送，是不能关联另一个远程库的，
					取消关联远程库的方法：
*/

/*从远程库克隆：要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone git//@github.com:用户名-code/文件名，进行克隆
				git支持多种协议，包括https，但ssh协议更快。
*/

/*创建与合并分支笔记：git鼓励大量使用分支：
						查看分支：git branch
						创建分支：git branch name
						切换分支：git checkout name 或者 git switch name
						创建+切换分支：git checkout -b name 或者 git switch -c name
						合并某分支到当前分支：git merge name
						删除分支：git branch -d name
				分支有什么用呢？
*/